name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production

  deploy-staging:
    name: Deploy to Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for staging
        run: pnpm run build
        env:
          NODE_ENV: production
          PAYLOAD_SECRET: ${{ secrets.STAGING_PAYLOAD_SECRET }}
          DATABASE_URI: ${{ secrets.STAGING_DATABASE_URI }}
          PAYLOAD_PUBLIC_SERVER_URL: ${{ vars.STAGING_URL }}

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add your staging deployment command here
          # Example: vercel --token ${{ secrets.VERCEL_TOKEN }}

      - name: Run staging health check
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ vars.STAGING_URL }}/api/health || exit 1

      - name: Notify staging success
        run: |
          echo "âœ… Staging deployment successful!"
          echo "URL: ${{ vars.STAGING_URL }}"

  deploy-production:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: pnpm run build
        env:
          NODE_ENV: production
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_PUBLIC_SERVER_URL: ${{ vars.PRODUCTION_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Upload source maps to Sentry
        run: pnpm run sentry:sourcemaps
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment command here
          # Example for Vercel: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # Example for Railway: railway deploy --service ${{ secrets.RAILWAY_SERVICE_ID }}

      - name: Run production health check
        run: |
          sleep 30  # Wait for deployment
          curl -f ${{ vars.PRODUCTION_URL }}/api/health || exit 1

      - name: Create database backup
        run: |
          echo "ðŸ“¦ Creating post-deployment backup..."
          # Add backup command here if needed

      - name: Notify success
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          echo "URL: ${{ vars.PRODUCTION_URL }}"
