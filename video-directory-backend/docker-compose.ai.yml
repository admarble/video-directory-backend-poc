services:
  # n8n Workflow Engine
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: video-agent-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://host.docker.internal:5678/
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_LOG_LEVEL=info
      - EXECUTIONS_TIMEOUT=900
      - EXECUTIONS_TIMEOUT_MAX=3600
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true
      # Fix for permission warnings
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      # Enable task runners (removes deprecation warning)
      - N8N_RUNNERS_ENABLED=true
      # Ensure data persistence
      - N8N_USER_FOLDER=/home/node/.n8n
    env_file:
      - n8n.env
    volumes:
      # Main data volume - bind mount to local directory
      - ./n8n-data:/home/node/.n8n
      # Backup workflows (read-only) - these won't override database
      - ./n8n-workflows:/home/node/.n8n/backup-workflows:ro
      # Create explicit backup directory
      - ./n8n-backups:/home/node/.n8n/backups
    networks:
      - ai-stack
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Add user specification to avoid permission issues
    user: "1000:1000"

  # Optional: PostgreSQL for n8n persistence
  postgres:
    image: postgres:15-alpine
    container_name: video-agent-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8n_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-stack
    restart: unless-stopped

  # Optional: Redis for caching and queuing
  redis:
    image: redis:7-alpine
    container_name: video-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-stack
    restart: unless-stopped
    profiles:
      - with-cache

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ai-stack:
    driver: bridge

# Additional services can be added here:
# - Monitoring (Prometheus + Grafana)
# - Message queues (RabbitMQ)
# - Additional AI services