{
  "name": "Search Videos Tool",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Extract and validate input parameters\nconst input = $input.all()[0].json;\nconst query = input.query;\nconst filters = input.filters || {};\n\n// Validate query\nif (!query || typeof query !== 'string') {\n  return [{\n    json: {\n      error: 'Search query is required and must be a string',\n      success: false\n    }\n  }];\n}\n\n// Build search parameters\nconst searchParams = new URLSearchParams();\nsearchParams.append('search', query.trim());\n\n// Add filters if provided\nif (filters.limit && typeof filters.limit === 'number') {\n  searchParams.append('limit', filters.limit.toString());\n} else {\n  searchParams.append('limit', '10'); // Default limit\n}\n\nif (filters.page && typeof filters.page === 'number') {\n  searchParams.append('page', filters.page.toString());\n}\n\nif (filters.published !== undefined) {\n  searchParams.append('where[published][equals]', filters.published.toString());\n}\n\nif (filters.skillLevel && typeof filters.skillLevel === 'string') {\n  searchParams.append('where[skillLevel][equals]', filters.skillLevel);\n}\n\nif (filters.category && typeof filters.category === 'string') {\n  searchParams.append('where[categories][in]', filters.category);\n}\n\nif (filters.tag && typeof filters.tag === 'string') {\n  searchParams.append('where[tags][in]', filters.tag);\n}\n\nreturn [{\n  json: {\n    searchParams: searchParams.toString(),\n    query: query.trim(),\n    filters: filters,\n    success: true\n  }\n}];"
      },
      "id": "validate-and-build-query",
      "name": "Validate and Build Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "check-validation",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 200]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://host.docker.internal:3001/api/videos/search?={{ $json.searchParams }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "search-videos-api",
      "name": "Search Videos API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [600, 100],
      "credentials": {
        "httpHeaderAuth": {
          "id": "payload-cms-auth",
          "name": "Payload CMS Auth"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "videos",
              "name": "videos",
              "value": "={{ $json.docs || [] }}",
              "type": "array"
            },
            {
              "id": "totalCount",
              "name": "totalCount",
              "value": "={{ $json.totalDocs || 0 }}",
              "type": "number"
            },
            {
              "id": "currentPage",
              "name": "currentPage",
              "value": "={{ $json.page || 1 }}",
              "type": "number"
            },
            {
              "id": "totalPages",
              "name": "totalPages",
              "value": "={{ $json.totalPages || 1 }}",
              "type": "number"
            },
            {
              "id": "hasNextPage",
              "name": "hasNextPage",
              "value": "={{ $json.hasNextPage || false }}",
              "type": "boolean"
            },
            {
              "id": "query",
              "name": "query",
              "value": "={{ $('Validate and Build Query').item.json.query }}",
              "type": "string"
            },
            {
              "id": "message",
              "name": "message",
              "value": "Search completed successfully",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-success-response",
      "name": "Format Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [800, 100]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "error",
              "name": "error",
              "value": "Search operation failed",
              "type": "string"
            },
            {
              "id": "details",
              "name": "details",
              "value": "={{ $json.error || $json.message || 'Search service unavailable' }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-api-error",
      "name": "Format API Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [800, 200]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success",
              "name": "success",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "error",
              "name": "error",
              "value": "={{ $json.error }}",
              "type": "string"
            }
          ]
        }
      },
      "id": "format-validation-error",
      "name": "Format Validation Error",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [600, 300]
    },
    {
      "parameters": {
        "events": [
          "activate"
        ]
      },
      "type": "n8n-nodes-base.n8nTrigger",
      "typeVersion": 1,
      "position": [
        0,
        200
      ],
      "id": "n8n-trigger",
      "name": "n8n Trigger"
    }
  ],
  "pinData": {
    "n8n Trigger": [
      {
        "json": {
          "query": "react hooks tutorial",
          "filters": {
            "limit": 5,
            "page": 1,
            "published": true,
            "skillLevel": "intermediate"
          }
        }
      }
    ]
  },
  "connections": {
    "n8n Trigger": {
      "main": [
        [
          {
            "node": "Validate and Build Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate and Build Query": {
      "main": [
        [
          {
            "node": "Check Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation": {
      "main": [
        [
          {
            "node": "Search Videos API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Videos API": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format API Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": [
    {
      "name": "MCP Tool",
      "id": "mcp-tool"
    }
  ]
}
