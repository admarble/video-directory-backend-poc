{
  "name": "Fixed MCP Server with Webhook Tools",
  "nodes": [
    {
      "parameters": {
        "authentication": "none",
        "path": "754ab685-0173-4eec-a996-1d56f9dc8339"
      },
      "id": "mcp-server-trigger",
      "name": "MCP Server Trigger",
      "type": "n8n-nodes-langchain.mcptrigger",
      "typeVersion": 1,
      "position": [300, 400]
    },
    {
      "parameters": {
        "name": "Search_Videos_Tool",
        "description": "Search for videos in the database. Required parameter: query (string). Optional: filters object with limit, page, skillLevel, topic, etc.",
        "httpMethod": "POST",
        "url": "http://host.docker.internal:5678/webhook/6ab4de58-b889-4c16-869e-743839d89ea6",
        "authentication": "none",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  query: $parameter.query,\n  filters: $parameter.filters || {},\n  timestamp: new Date().toISOString(),\n  source: 'mcp-client'\n}) }}",
        "schema": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search query for videos - what you want to find"
            },
            "filters": {
              "type": "object",
              "description": "Optional search filters to narrow results",
              "properties": {
                "limit": {
                  "type": "number",
                  "description": "Maximum number of results to return (default: 10)",
                  "minimum": 1,
                  "maximum": 100,
                  "default": 10
                },
                "page": {
                  "type": "number", 
                  "description": "Page number for pagination (default: 1)",
                  "minimum": 1,
                  "default": 1
                },
                "skillLevel": {
                  "type": "string",
                  "description": "Filter by skill level",
                  "enum": ["beginner", "intermediate", "advanced"]
                },
                "topic": {
                  "type": "string",
                  "description": "Filter by topic or category"
                }
              }
            }
          },
          "required": ["query"]
        }
      },
      "id": "search-videos-tool",
      "name": "Search Videos Tool",
      "type": "n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [500, 200]
    },
    {
      "parameters": {
        "name": "Create_Video_Tool", 
        "description": "Create a new video entry from a YouTube URL. Required: youtubeUrl (string). Optional: title, description, tags, skillLevel.",
        "httpMethod": "POST",
        "url": "http://host.docker.internal:5678/webhook/6ab4de58-b889-4c16-869e-743839d89ea6",
        "authentication": "none",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  action: 'create',\n  youtubeUrl: $parameter.youtubeUrl,\n  title: $parameter.title,\n  description: $parameter.description,\n  tags: $parameter.tags || [],\n  skillLevel: $parameter.skillLevel || 'intermediate',\n  publishImmediately: $parameter.publishImmediately || false,\n  timestamp: new Date().toISOString(),\n  source: 'mcp-client'\n}) }}",
        "schema": {
          "type": "object",
          "properties": {
            "youtubeUrl": {
              "type": "string",
              "description": "The YouTube URL to process",
              "pattern": "^(https?://)?(www\\.)?(youtube\\.com/watch\\?v=|youtu\\.be/)[\\w-]+(&[\\w=&-]*)?$"
            },
            "title": {
              "type": "string",
              "description": "Optional: Override the video title"
            },
            "description": {
              "type": "string", 
              "description": "Optional: Override the video description"
            },
            "tags": {
              "type": "array",
              "description": "Optional: Array of tags for the video",
              "items": {
                "type": "string"
              }
            },
            "skillLevel": {
              "type": "string",
              "description": "Skill level for the video content",
              "enum": ["beginner", "intermediate", "advanced"],
              "default": "intermediate"
            },
            "publishImmediately": {
              "type": "boolean",
              "description": "Whether to publish immediately or save as draft",
              "default": false
            }
          },
          "required": ["youtubeUrl"]
        }
      },
      "id": "create-video-tool",
      "name": "Create Video Tool",
      "type": "n8n-nodes-langchain.toolHttpRequest", 
      "typeVersion": 1,
      "position": [500, 400]
    },
    {
      "parameters": {
        "name": "Update_Video_Tool",
        "description": "Update an existing video by ID. Required: videoId (string). Optional: updates object with fields to modify.",
        "httpMethod": "POST", 
        "url": "http://host.docker.internal:5678/webhook/6ab4de58-b889-4c16-869e-743839d89ea6",
        "authentication": "none",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  action: 'update',\n  videoId: $parameter.videoId,\n  updates: $parameter.updates || {},\n  timestamp: new Date().toISOString(),\n  source: 'mcp-client'\n}) }}",
        "schema": {
          "type": "object",
          "properties": {
            "videoId": {
              "type": "string",
              "description": "The ID of the video to update"
            },
            "updates": {
              "type": "object",
              "description": "Object containing fields to update",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "New title for the video"
                },
                "description": {
                  "type": "string",
                  "description": "New description for the video"
                },
                "tags": {
                  "type": "array",
                  "description": "New tags array",
                  "items": {
                    "type": "string"
                  }
                },
                "skillLevel": {
                  "type": "string",
                  "description": "New skill level",
                  "enum": ["beginner", "intermediate", "advanced"]
                },
                "published": {
                  "type": "boolean",
                  "description": "Publication status"
                }
              }
            }
          },
          "required": ["videoId"]
        }
      },
      "id": "update-video-tool",
      "name": "Update Video Tool", 
      "type": "n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1,
      "position": [500, 600]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "video-operations",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-handler",
      "name": "Video Operations Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "jsCode": "// Router for different video operations\nconst input = $input.first().json;\nconst action = input.action || 'search';\n\nconsole.log('MCP Tool called:', action, input);\n\n// Route to appropriate handler based on action\nswitch(action) {\n  case 'create':\n    return [{ \n      json: { \n        ...input,\n        operation: 'create',\n        route: 'create-video'\n      } \n    }];\n    \n  case 'update':\n    return [{ \n      json: { \n        ...input,\n        operation: 'update', \n        route: 'update-video' \n      } \n    }];\n    \n  case 'search':\n  default:\n    return [{ \n      json: { \n        ...input,\n        operation: 'search',\n        route: 'search-videos'\n      } \n    }];\n}"
      },
      "id": "operation-router",
      "name": "Operation Router",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "search-condition",
              "leftValue": "={{ $json.route }}",
              "rightValue": "search-videos",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            },
            {
              "id": "create-condition", 
              "leftValue": "={{ $json.route }}",
              "rightValue": "create-video",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "update-condition",
              "leftValue": "={{ $json.route }}",
              "rightValue": "update-video", 
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "route-switch",
      "name": "Route Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1200, 400]
    },
    {
      "parameters": {
        "url": "=http://host.docker.internal:3001/api/videos",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "where",
              "value": "={{ JSON.stringify({\n  or: [\n    { title: { contains: $json.query } },\n    { description: { contains: $json.query } },\n    { tags: { contains: $json.query } }\n  ]\n}) }}"
            },
            {
              "name": "limit",
              "value": "={{ $json.filters?.limit || 10 }}"
            },
            {
              "name": "page", 
              "value": "={{ $json.filters?.page || 1 }}"
            }
          ]
        }
      },
      "id": "search-videos-api",
      "name": "Search Videos API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1400, 200]
    },
    {
      "parameters": {
        "url": "=http://host.docker.internal:3001/api/videos",
        "authentication": "predefinedCredentialType", 
        "nodeCredentialType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify({\n  youtubeUrl: $json.youtubeUrl,\n  title: $json.title || 'Processing...',\n  description: $json.description || '',\n  tags: $json.tags || [],\n  skillLevel: $json.skillLevel || 'intermediate',\n  published: $json.publishImmediately || false\n}) }}"
      },
      "id": "create-video-api",
      "name": "Create Video API", 
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1400, 400]
    },
    {
      "parameters": {
        "url": "=http://host.docker.internal:3001/api/videos/{{ $json.videoId }}",
        "method": "PATCH",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth", 
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.updates) }}"
      },
      "id": "update-video-api",
      "name": "Update Video API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1400, 600]
    },
    {
      "parameters": {
        "jsCode": "// Format the final response\nconst input = $input.first().json;\nconst operation = $('Operation Router').first().json.operation;\n\nlet response;\n\nswitch(operation) {\n  case 'search':\n    response = {\n      success: true,\n      operation: 'search',\n      results: input.docs || [],\n      total: input.totalDocs || 0,\n      page: input.page || 1,\n      totalPages: input.totalPages || 1\n    };\n    break;\n    \n  case 'create':\n    response = {\n      success: true,\n      operation: 'create',\n      video: input,\n      message: 'Video created successfully'\n    };\n    break;\n    \n  case 'update':\n    response = {\n      success: true,\n      operation: 'update', \n      video: input,\n      message: 'Video updated successfully'\n    };\n    break;\n    \n  default:\n    response = {\n      success: false,\n      error: 'Unknown operation',\n      operation: operation\n    };\n}\n\nreturn [{ json: response }];"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1600, 400]
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1800, 400]
    }
  ],
  "connections": {
    "MCP Server Trigger": {
      "main": [
        [
          {
            "node": "Search Videos Tool",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Video Tool",
            "type": "main", 
            "index": 0
          },
          {
            "node": "Update Video Tool",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Video Operations Webhook": {
      "main": [
        [
          {
            "node": "Operation Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Operation Router": {
      "main": [
        [
          {
            "node": "Route Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Switch": {
      "main": [
        [
          {
            "node": "Search Videos API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Video API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Video API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Videos API": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video API": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Video API": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1"
}