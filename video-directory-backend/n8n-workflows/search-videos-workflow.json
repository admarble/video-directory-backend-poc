{
  "nodes": [
    {
      "parameters": {},
      "id": "execute-workflow-trigger",
      "name": "When Called by MCP",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        300,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract parameters from MCP call\nconst query = $input.first().json.query;\nconst filters = $input.first().json.filters || {};\n\nconsole.log('Search Videos called with:', { query, filters });\n\n// Build search parameters\nconst searchParams = {\n  where: {},\n  limit: filters.limit || 10,\n  page: filters.page || 1\n};\n\n// Add query to search\nif (query) {\n  searchParams.where.or = [\n    { title: { contains: query } },\n    { description: { contains: query } },\n    { tags: { contains: query } }\n  ];\n}\n\n// Add filters\nif (filters.skillLevel) {\n  searchParams.where.skillLevel = { equals: filters.skillLevel };\n}\n\nif (filters.topic) {\n  searchParams.where.topic = { equals: filters.topic };\n}\n\nreturn [{ json: { searchParams } }];"
      },
      "id": "prepare-search",
      "name": "Prepare Search",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        500,
        300
      ]
    },
    {
      "parameters": {
        "url": "=http://host.docker.internal:3001/api/videos",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "where",
              "value": "={{ JSON.stringify($json.searchParams.where) }}"
            },
            {
              "name": "limit",
              "value": "={{ $json.searchParams.limit }}"
            },
            {
              "name": "page",
              "value": "={{ $json.searchParams.page }}"
            }
          ]
        }
      },
      "id": "search-payload",
      "name": "Search Payload CMS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Format response for MCP client\nconst response = $input.first().json;\n\nconst result = {\n  videos: response.docs || [],\n  total: response.totalDocs || 0,\n  page: response.page || 1,\n  totalPages: response.totalPages || 1,\n  query: $('When Called by MCP').first().json.query\n};\n\nconsole.log('Search completed:', result);\n\nreturn [{ json: result }];"
      },
      "id": "format-response",
      "name": "Format Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    }
  ],
  "connections": {
    "When Called by MCP": {
      "main": [
        [
          {
            "node": "Prepare Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Search": {
      "main": [
        [
          {
            "node": "Search Payload CMS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Payload CMS": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1"
}