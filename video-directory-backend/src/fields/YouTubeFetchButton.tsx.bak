'use client';

import React, { useState } from 'react';
import { Button } from '@payloadcms/ui';
import { useForm } from '@payloadcms/ui';
// Removed unused import: useDocumentInfo

/**
 * YouTube Fetch Button Component
 * 
 * A UI field component that provides a button to fetch
 * YouTube video data and populate fields in the form.
 */
const YouTubeFetchButton = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [thumbnailUrl, setThumbnailUrl] = useState(null);
  
  // Get form state
  const { getFields, dispatchFields } = useForm();
  const { fields } = getFields();
  
  // Function to fetch YouTube video details
  const fetchVideoDetails = async () => {
    // Use safe property access with type assertion
    const videoUrlField = fields?.['videoUrl' as keyof typeof fields];
    
    if (!videoUrlField || !videoUrlField.value) {
      setError('Please enter a YouTube URL first');
      setSuccess(false);
      return;
    }
    
    setLoading(true);
    setError(null);
    setSuccess(false);
    
    try {
      const response = await fetch(`/api/youtube?url=${encodeURIComponent(videoUrlField.value)}`);
      
      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to fetch video details');
      }
      
      const data = await response.json();
      
      // Update form fields with fetched data
      dispatchFields({
        type: 'UPDATE',
        path: 'title',
        value: data.title,
      });
      
      dispatchFields({
        type: 'UPDATE',
        path: 'description',
        value: data.description,
      });
      
      dispatchFields({
        type: 'UPDATE',
        path: 'duration',
        value: data.duration,
      });
      
      // Set thumbnail URL for display
      setThumbnailUrl(data.thumbnailUrl);
      setSuccess(true);
    } catch (err) {
      setError(err instanceof Error ? err.message : String(err));
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div>
      <div className="field-label">YouTube Data</div>
      <p style={{ fontSize: '14px', marginBottom: '10px' }}>
        Auto-fill video details by clicking the button below after entering a YouTube URL.
      </p>
      <Button
        onClick={fetchVideoDetails}
        disabled={loading}
        buttonStyle="primary"
      >
        {loading ? 'Loading...' : 'Fetch YouTube Data'}
      </Button>
      
      {error && (
        <div style={{ color: 'var(--theme-error-500)', marginTop: '10px', fontSize: '14px' }}>
          {error}
        </div>
      )}
      
      {success && (
        <div style={{ color: 'var(--theme-success-500)', marginTop: '10px', fontSize: '14px' }}>
          âœ“ Video data fetched successfully
        </div>
      )}
      
      {thumbnailUrl && (
        <div style={{ marginTop: '15px' }}>
          <p style={{ fontSize: '14px', marginBottom: '8px' }}>Thumbnail:</p>
          <div style={{ position: 'relative', width: '100%', paddingBottom: '56.25%', marginBottom: '10px' }}>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={thumbnailUrl}
              alt="Video thumbnail"
              style={{
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                height: '100%',
                objectFit: 'cover',
                borderRadius: '4px',
              }}
            />
          </div>
          <p style={{ fontSize: '12px', color: 'var(--theme-text-400)', marginBottom: '10px' }}>
            Download and upload this image to the thumbnail field.
          </p>
          <a 
            href={thumbnailUrl} 
            download="thumbnail.jpg" 
            target="_blank" 
            rel="noopener noreferrer" 
            style={{ 
              display: 'inline-block',
              padding: '6px 12px', 
              backgroundColor: 'var(--theme-elevation-150)',
              color: 'var(--theme-text-500)',
              borderRadius: '4px',
              fontSize: '14px',
              textDecoration: 'none',
            }}
          >
            Download Thumbnail
          </a>
        </div>
      )}
    </div>
  );
};

export default YouTubeFetchButton;